TestCase subclass: #MyTest	instanceVariableNames: 'v1 v2 v3 v4 v5 st0 st1 st2 st3 st4 sec'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1AlexTest'!!MyTest methodsFor: 'as yet unclassified' stamp: 'A.V. 4/1/2016 16:36'!setUpst0 := Student new.st0 name: 'Yossef'.st0 id: '111'.st0 isDormsResident: false.st1 := Student new.st1 name: 'Yossi'.st1 id: '111'.st1 isDormsResident: true.st2 := Student new.st2 name: 'Gil'.st2 id: '222'.st2 isDormsResident: false.st3 := Student new.st3 name: 'Shahar'.st3 id: '333'.st3 isDormsResident: true.st4 := Student new.st4 name: 'Shuki'.st4 id: '100'.st4 isDormsResident: false.v1 := Vehicle new.v1 licenseNumber: '0101'.v1 manufacturer: 'Suzuki'.v1 color: 'White'.v1 addSticker: 'Red'.v2 := Vehicle new.v2 licenseNumber: '2020'.v2 manufacturer: 'Fiat'.v2 color: 'Black'.v2 addSticker: 'Blue'.v2 addSticker: 'Red'.v3 := Vehicle new.v3 licenseNumber: '30303'.v3 manufacturer: 'BMW'.v3 color: 'Yellow'.v3 addSticker: 'White'.v4 := Vehicle new.v4 licenseNumber: '40404'.v4 manufacturer: 'Subaru'.v4 color: 'Grey'.v4 addSticker: 'Yellow'.v5 := Vehicle new.v5 licenseNumber: '50505'.v5 manufacturer: 'Hyundai'.v5 color: 'Red'.v5 addSticker: 'Red'.v5 addSticker: 'White'.v5 addSticker: 'Yellow'.sec := Security new.! !!MyTest methodsFor: 'as yet unclassified' stamp: 'IA 4/8/2016 15:53'!testAddRemoveStickers[v1 removeSticker: 11] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].[v1 addSticker: []] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].[v5 addSticker: nil] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].[v1 removeSticker: []] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].self assert: ((v1 getStickers) includes: 'Red').self assert: ((v2 getStickers) includes: 'Blue' ).self assert: ((v2 getStickers) includes: 'Red' ).self assert: ((v3 getStickers) includes: 'White').self assert: ((v4 getStickers) includes: 'Yellow').self assert: ((v5 getStickers) includes: 'Yellow').self assert: ((v5 getStickers) includes: 'Red').self assert: ((v5 getStickers) includes: 'White').v5 removeSticker: 'Yellow'.self deny:  ((v5 getStickers) includes: 'Yellow').v5 removeSticker: 'Green'.self deny:  ((v5 getStickers) includes: 'Green').v5 addSticker: 'Green'.self assert:  ((v5 getStickers) includes: 'Green').v5 addSticker: 'Green'.self assert:  ((v5 getStickers) size = 3).v5 removeSticker: 'White'.v5 removeSticker: 'Red'.v5 removeSticker: 'Green'.self assert:  ((v5 getStickers) size = 0).Transcript show: 'testAddRemoveStickers PASSED'; cr.! !!MyTest methodsFor: 'as yet unclassified' stamp: 'IA 4/8/2016 15:51'!testAddStudent[sec addStudent: 11] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].[sec addStudent: v1] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].[sec addStudent: 'a'] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].sec addStudent: st1.sec addStudent: st2.sec addStudent: st3.sec addStudent: st4.self assert: (sec getStudentsNames includes: 'Yossi' ).self assert: (sec getStudentsNames includes: 'Gil' ).self assert: (sec getStudentsNames includes: 'Shahar' ).self assert: (sec getStudentsNames includes: 'Shuki' ).sec addStudent: st0.self deny: (sec getStudentsNames includes: 'Yossi' ).self assert: (sec getStudentsNames includes: 'Yossef' ).sec addStudent: st1.self deny: (sec getStudentsNames includes: 'Yossef' ).self assert: (sec getStudentsNames includes: 'Yossi' ).self assert: (sec getStudentsNames size = 4 ).Transcript show: 'testAddStudent PASSED'; cr.! !!MyTest methodsFor: 'as yet unclassified' stamp: 'IA 4/8/2016 15:51'!testAuthorizationRequestsec addStudent: st1.sec addStudent: st2.sec addStudent: st3.sec addStudent: st4.sec authorizationRequest: '111' forVehicle: v1.sec authorizationRequest: '111' forVehicle: v2.sec authorizationRequest: '111' forVehicle: v3.self assert: ((sec getRequests: '111') size = 3 ).self assert: ((sec getRequests: '111') includes: '0101').self assert: ((sec getRequests: '111') includes: '2020' ).self assert: ((sec getRequests: '111') includes: '30303' ).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '0101' ).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '2020' ).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '30303' ).sec authorizationRequest: '100' forVehicle: v2.sec authorizationRequest: '100' forVehicle: v4.self assert: ((sec getRequests: '100') size = 2).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '40404' ).self assert: ((sec getAuthorizedVehiclesNumbers) size = 4 ).sec removeStudent: '111'.self assert: ((sec getAuthorizedVehiclesNumbers) size = 2 ).self deny: ((sec getAuthorizedVehiclesNumbers) includes: '0101' ).self deny: ((sec getAuthorizedVehiclesNumbers) includes: '30303' ).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '2020' ).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '40404' ).self deny:(sec letVehicleIn: v1).self deny:(sec letVehicleIn: v3).self assert:(sec letVehicleIn: v2).self assert:(sec letVehicleIn: v4).self assert: ((sec getAuthorizedVehiclesNumbers) size = 2 ).sec authorizationPolicy: [:student :vehicle | (student isDormsResident)and: [vehicle color ~= 'Black']]. self deny:(sec letVehicleIn: v2).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '2020' ).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '40404' ).self assert:(sec letVehicleOut: v2).sec removeStudent: '100'.self assert: ((sec getAuthorizedVehiclesNumbers) size = 0 ).sec authorizationRequest: '333' forVehicle: v2.self deny:(sec letVehicleIn: v2).self assert: ((sec getAuthorizedVehiclesNumbers) size = 0 ).sec authorizationPolicy: [:student :vehicle | (student isDormsResident)and: [(vehicle getStickers) includes: 'Blue']]. sec authorizationRequest: '333' forVehicle: v2.self assert: ((sec getAuthorizedVehiclesNumbers) size = 1 ).self assert: ((sec getAuthorizedVehiclesNumbers) includes: '2020' ).Transcript show: 'testAuthorizationRequest PASSED'; cr.! !!MyTest methodsFor: 'as yet unclassified' stamp: 'IA 4/8/2016 15:52'!testGateRegulationssec addStudent: st1.sec addStudent: st2.sec addStudent: st3.sec addStudent: st4.sec authorizationRequest: (st1 id) forVehicle: v1.sec authorizationRequest: (st1 id) forVehicle: v2.sec authorizationRequest: (st4 id) forVehicle: v4.self assert: (sec letVehicleIn: v1 ).self assert: (sec letVehicleIn: v2 ).self assert: (sec letVehicleIn: v4 ).self deny: (sec letVehicleIn: v1 ).self deny: (sec letVehicleIn: v2 ).self deny: (sec letVehicleIn: v4 ).self deny: (sec letVehicleIn: v3 ).sec removeStudent: st1 id.sec removeStudent: st4 id.self assert: (sec letVehicleOut: v1 ).self assert: (sec letVehicleOut: v2 ).self assert: (sec letVehicleOut: v4 ).self deny: (sec letVehicleIn: v1 ).self deny: (sec letVehicleIn: v2 ).self deny: (sec letVehicleIn: v4 ).self deny: (sec letVehicleIn: v5 ).sec addPermissionToGatePolicy: [:car | (car getStickers) includes: 'Yellow'. ].self assert: (sec letVehicleIn: v4 ).self deny: (sec letVehicleIn: v4 ).self assert: (sec letVehicleIn: v5 ).sec authorizationRequest: (st3 id) forVehicle: v3.self assert: (sec letVehicleIn: v3 ).self deny: (sec letVehicleIn: v1 ).sec addPermissionToGatePolicy: [:car | (car manufacturer) = 'Suzuki'. ].self assert: (sec letVehicleIn: v1 ).sec removeStudent: st3 id.self assert: (sec letVehicleOut: v3 ).self deny: (sec letVehicleIn: v3 ).sec addPermissionToGatePolicy: [:car | (car licenseNumber) = '30303'. ].self assert: (sec letVehicleIn: v3 ).self assert: (sec letVehicleOut: v3 ).sec resetGatePolicy.self assert: (sec letVehicleOut: v1 ).self deny: (sec letVehicleIn: v1 ).sec authorizationRequest: (st2 id) forVehicle: v1.self assert: (sec letVehicleIn: v1 ).sec cancelAuthorizations: [:car | (car manufacturer) =  'Suzuki' ].self assert: (sec letVehicleOut: v1 ).self deny: (sec letVehicleIn: v1 ).Transcript show: 'testGateRegulations PASSED'; cr.! !!MyTest methodsFor: 'as yet unclassified' stamp: 'IA 4/8/2016 15:52'!testRemoveStudent[sec removeStudent: 11] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].[sec removeStudent: v1] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].[sec removeStudent: []] on: Error do: [:err | self assert: ((err messageText) = 'invalid input') ].sec addStudent: st1.sec addStudent: st2.sec addStudent: st3.sec addStudent: st4.sec removeStudent: '111'.self assert: (sec getStudentsNames size = 3 ).sec removeStudent: 'aaa'.sec removeStudent: '222'.sec removeStudent: '333'.sec removeStudent: '100'.self assert: (sec getStudentsNames size = 0 ).sec removeStudent: '100'.self assert: (sec getStudentsNames size = 0 ).Transcript show: 'testRemoveStudent PASSED'; cr.! !