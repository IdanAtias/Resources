Object subclass: #Security	instanceVariableNames: 'students vehicles authorizationPolicy gatePolicy vehiclesInside'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Security methodsFor: 'initialize-release' stamp: 'IA 4/8/2016 17:42'!initialize	"students holds 'students' as keys and 'vehicles' as values"	"vehicles hold's all the vehicles who have access to the Technion. It is a Bag because vehicle can be added for more than one student"	"authorizationPolicy is by default a block who returns true for any student-vehicle combination"	"vehiclesInside is a set of vehicles that are currently INSIDE the Tehcnion"	students := Dictionary new.	vehicles := Bag new.	vehiclesInside := Set new.	authorizationPolicy := [:student :vehicle | true].	gatePolicy := [ :vehicle | self authorizationExists: vehicle ].	! !!Security methodsFor: 'vehicles' stamp: 'IA 4/1/2016 12:47'!getAuthorizedVehiclesNumbers	|numbers|	numbers := Set new.	vehicles do: [ :vehicle | numbers add: vehicle licenseNumber ].	^numbers ! !!Security methodsFor: 'vehicles' stamp: 'IA 4/4/2016 17:14'!letVehicleIn: aVehicle	(aVehicle isKindOf: Vehicle) ifFalse: [ self error: 'invalid input' ].	(gatePolicy value: aVehicle) ifFalse: [^false].	(vehiclesInside includes: aVehicle) ifTrue: [^false].	vehiclesInside add: aVehicle.	^true			! !!Security methodsFor: 'vehicles' stamp: 'IA 4/4/2016 16:00'!letVehicleOut: aVehicle	(aVehicle isKindOf: Vehicle) ifFalse: [ self error: 'invalid input' ].	(vehiclesInside includes: aVehicle) ifFalse: [^false].	vehiclesInside remove: aVehicle.	^true! !!Security methodsFor: 'students' stamp: 'IA 4/8/2016 16:22'!addStudent: aStudent 	"each student(key) holds set of vehicles that were asked for access(values)."	(aStudent isKindOf: Student) ifFalse: [self error: 'invalid input'].	(students includesKey: aStudent) ifTrue: [ self removeStudent: aStudent id ].	students at: aStudent put: Set new.	 ! !!Security methodsFor: 'students' stamp: 'IA 4/4/2016 16:27'!authorizationRequest: studentId forVehicle: aVehicle	|student  studentsKeys isAccessGranted|	(studentId isKindOf: String) ifFalse: [ self error: 'invalid input' ].	(aVehicle isKindOf: Vehicle) ifFalse: [ self error: 'invalid input' ].	student := Student new.	student id: studentId.	(students includesKey: student) ifFalse: [^self]. "not doing anything if student does not exist"		studentsKeys := students keys.	studentsKeys do: [ :st | ((st id) = studentId) ifTrue: [student := st ]].		(students at: student) add: aVehicle. "adding the vehicle asked for access to student's set"		isAccessGranted := authorizationPolicy value: student value: aVehicle.	(isAccessGranted) ifTrue: [ vehicles add: aVehicle ]. "Adding vehicle to set of vehicles that HAVE access"			! !!Security methodsFor: 'students' stamp: 'IA 4/4/2016 16:22'!getRequests: studentId	|tmp isStudentExists numbers|	(studentId isKindOf: String) ifFalse: [ self error: 'invalid input' ].	"tmp used for finding student in dict"	tmp := Student new.	tmp id: studentId.	numbers := Set new.	isStudentExists := students includesKey: tmp.	(isStudentExists = true) 		ifTrue: [ (students at: tmp) do: [ :vehicle | numbers add: vehicle licenseNumber ] ]		ifFalse: [ numbers := nil ].	^numbers! !!Security methodsFor: 'students' stamp: 'IA 4/1/2016 12:42'!getStudentsNames	|names studentsArray|	names := Set new.	studentsArray := students keys.	studentsArray do: [ :student | names add: student name ].	^names ! !!Security methodsFor: 'students' stamp: 'IA 4/8/2016 17:43'!removeStudent: studentId	|tmp stVehicles|	(studentId isKindOf: String) ifFalse: [ self error: 'invalid input' ].	"tmp used just for finding the student to remove in the dictionary"	tmp := Student new.	tmp id: studentId.	(students includesKey: tmp) ifFalse: [^self].	stVehicles := students at: tmp.	(stVehicles) do: [ :vehicle | (vehicles includes: vehicle) ifTrue: [ vehicles remove: vehicle ] ].	students removeKey: tmp.! !!Security methodsFor: 'policy' stamp: 'IA 4/6/2016 21:40'!addPermissionToGatePolicy: aBlock	| currBlock blockToAdd |	(aBlock isBlock) ifFalse: [ self error: 'invalid input'].	currBlock := gatePolicy.	blockToAdd := aBlock.	gatePolicy := [ :vehicle | (currBlock value: vehicle) or: (blockToAdd value: vehicle) ].	! !!Security methodsFor: 'policy' stamp: 'IA 4/8/2016 16:22'!authorizationExists: aVehicle	(aVehicle isKindOf: Vehicle) ifFalse: [self error: 'invalid input'].		^(vehicles includes: aVehicle)	! !!Security methodsFor: 'policy' stamp: 'LBA 4/1/2016 00:02'!authorizationPolicy	^authorizationPolicy! !!Security methodsFor: 'policy' stamp: 'IA 4/8/2016 16:23'!authorizationPolicy: aBlock	(aBlock isBlock) ifFalse: [self error: 'invalid input'].	authorizationPolicy := aBlock.! !!Security methodsFor: 'policy' stamp: 'IA 4/8/2016 16:23'!cancelAuthorizations: aBlock	(aBlock isBlock) ifFalse: [self error: 'invalid input'].	(vehicles) do: [:vehicle | (aBlock value: vehicle) ifTrue: [vehicles remove: vehicle]].	! !!Security methodsFor: 'policy' stamp: 'LBA 4/1/2016 00:04'!gatePolicy	^gatePolicy! !!Security methodsFor: 'policy' stamp: 'IA 4/6/2016 21:41'!resetGatePolicy	gatePolicy := [:vehicle | self authorizationExists: vehicle].! !Object subclass: #Student	instanceVariableNames: 'name id isDormsResident'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Student methodsFor: 'id' stamp: 'IA 3/29/2016 19:25'!id	^id! !!Student methodsFor: 'id' stamp: 'IA 4/4/2016 15:51'!id: aString	(aString isKindOf: String) ifFalse: [ self error: 'invalid input' ].	id := aString! !!Student methodsFor: 'isDormsResident' stamp: 'IA 3/29/2016 19:27'!isDormsResident	^isDormsResident! !!Student methodsFor: 'isDormsResident' stamp: 'IA 4/4/2016 15:51'!isDormsResident: aBoolean	(aBoolean isKindOf: Boolean) ifFalse: [ self error: 'invalid input' ].	isDormsResident := aBoolean! !!Student methodsFor: 'comparing' stamp: 'IA 4/4/2016 15:50'!= other	(other isKindOf: Student) ifFalse: [ self error: 'invalid input' ].	^(other id = self id)! !!Student methodsFor: 'comparing' stamp: 'IA 4/1/2016 12:37'!hash	^(id hash)! !!Student methodsFor: 'name' stamp: 'IA 3/29/2016 19:23'!name	^name! !!Student methodsFor: 'name' stamp: 'IA 4/4/2016 15:52'!name: aString	(aString isKindOf: String) ifFalse: [ self error: 'invalid input' ].	name := aString! !!Student methodsFor: 'initialize-release' stamp: 'IA 3/29/2016 19:15'!initialize"initializing student class:"	name := ''.	id :=  ''.	isDormsResident := false.! !Object subclass: #Vehicle	instanceVariableNames: 'licenseNumber manufacturer color stickers'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Vehicle methodsFor: 'getters' stamp: 'LBA 3/30/2016 21:18'!color	^color! !!Vehicle methodsFor: 'getters' stamp: 'LBA 3/30/2016 21:21'!getStickers	^stickers! !!Vehicle methodsFor: 'getters' stamp: 'LBA 3/30/2016 21:17'!licenseNumber	^licenseNumber! !!Vehicle methodsFor: 'getters' stamp: 'LBA 3/30/2016 21:18'!manufacturer	^manufacturer	! !!Vehicle methodsFor: 'comparing' stamp: 'IA 4/4/2016 15:56'!= other	(other isKindOf: Vehicle) ifFalse: [ self error: 'invalid input' ].	(((licenseNumber == other licenseNumber) and: (manufacturer == other manufacturer)) and: (color == other color)) 		ifTrue: [^true] ifFalse: [^false].		 ! !!Vehicle methodsFor: 'hash' stamp: 'LBA 3/31/2016 23:36'!hash	| hcode_license hcode_manufacturer hcode_color res |	hcode_license := licenseNumber hash.	hcode_manufacturer := manufacturer hash.	hcode_color := color hash.	res :=  ( hcode_license bitXor: hcode_manufacturer ) bitAnd: hcode_color.	^res! !!Vehicle methodsFor: 'stickers-handler' stamp: 'IA 4/4/2016 15:57'!addSticker: aString	(aString isKindOf: String) ifFalse: [ self error: 'invalid input' ].	stickers add: aString.! !!Vehicle methodsFor: 'stickers-handler' stamp: 'IA 4/4/2016 15:57'!removeSticker: aString	(aString isKindOf: String) ifFalse: [ self error: 'invalid input' ].	stickers remove: aString ifAbsent: [].! !!Vehicle methodsFor: 'setters' stamp: 'IA 4/4/2016 15:56'!color: aString	(aString isKindOf: String) ifFalse: [ self error: 'invalid input' ].	color := aString.! !!Vehicle methodsFor: 'setters' stamp: 'IA 4/4/2016 15:57'!licenseNumber: aString	(aString isKindOf: String) ifFalse: [ self error: 'invalid input' ].	licenseNumber := aString.! !!Vehicle methodsFor: 'setters' stamp: 'IA 4/4/2016 15:57'!manufacturer: aString	(aString isKindOf: String) ifFalse: [ self error: 'invalid input' ].	manufacturer := aString.! !!Vehicle methodsFor: 'initialize-release' stamp: 'LBA 3/30/2016 21:15'!initialize	licenseNumber := ''.	manufacturer := ''.	color := ''.	stickers := Set new.! !